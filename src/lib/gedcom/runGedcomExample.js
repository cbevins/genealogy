/**
 * Example of constructing a Gedcom instance from _gedcomData.js data
 * and using it to search for information of interest.
 * The _gedcomData.js file itself is generated by convertGedcom2Data.js
 * from a GEDCOM text file produced by Ancestry.com or RootsMagic.
 */
import { constructGedcom } from './constructGedcom.js'    // or from '$lib/index.js' if using SvelteKit
// import { _gedcomData } from './_gedcomAncestry.js'
import { _gedcomData } from './_gedcomDataRootsMagic.js'
import { intFmt } from '../helpers/formatters.js'

const started = new Date()
runExample()
console.log(`Total elapsed time: ${(new Date()-started)} msec`)

function runExample() {
    // Create the Gedcom instance
    const gedcom = constructGedcom(_gedcomData)

    // Access content of interest from the Gedcom
    const source = gedcom.findFirstContent('', ['HEAD','SOUR','NAME'])
    const created = gedcom.findFirstContent('', ['HEAD','DATE'])
    console.log(`\nRead GEDCOM File created by ${source} on ${created}`)

    // Show the toplevel command set
    const top = gedcom.topLevelCounts()
    console.log(`Resulting Gedcom instance has ${top.length} Level 0 record types:`)
    for(const pair of top) console.log(`    ${intFmt(pair[1], 8)} ${pair[0]}`)

    // Show the command contexts
    const contexts = gedcom.contexts()
    console.log(`Resulting Gedcom instance has ${contexts.length} record contexts:`)
    // for(const pair of contexts.sort()) console.log(`  ${intFmt(pair[1], 6)} ${pair[0]}`)
}
